The version of vagrant that I used, vagrant(1.8.4) for testing.
Tomcat7

Execute command from git bash
vagrant init 
Above command will create a Vagrant file (Vagrantfile)
-----------------------------------------------------
Then create a vagrant_provision.sh file under same directory 

#!/usr/bin/env bash
sudo apt-get update
echo "Installing Apache.."
sudo apt-get install -y apache2
echo "Installing Tomcat.."
sudo apt-get install -y tomcat7
echo "Installing Tomcat7 docs.."
sudo apt-get install -y tomcat7-docs
echo "Installing Tomcat7 administration webapps.."
sudo apt-get install -y tomcat7-admin
echo "Installing Tomcat7 examples webapps.."
sudo apt-get install tomcat7-examples
echo "Installing Git.."
sudo apt-get install -y git
echo "Installing Maven.."
sudo apt-get install -y maven
echo "Installing Java 7.."
sudo apt-get install -y software-properties-common python-software-properties
echo oracle-java7-installer shared/accepted-oracle-license-v1-1 select true | sudo /usr/bin/debconf-set-selections
sudo add-apt-repository ppa:webupd8team/java -y
sudo apt-get update
sudo apt-get install oracle-java7-installer
echo "Setting environment variables for Java 7.."
sudo apt-get install -y oracle-java7-set-default

Then I exeuted command :- vagrant up
Above command will make our VM up and running, also make an instance of Apache and Tomcat running 
(which we mentioned in vagrant_provison.sh).

--------------------------------------------------------------------------------------------------------------------
To check if Apache is running, hit url : http://192.168.6.8 and 
To check if Tomcat is running, hit url : http://192.168.6.8:8080

------------------------------------------------------------------------------------------------------------------
I created the VM called webserverMachine,then i went into that webserverMachine using command :-vagrant ssh

-------------------------------------------------------------------------------------------------------------------
folder name "vagrant", this is the folder which is linked to our host machine,
and going inside we will see our project
-------------------------------------------------------------------------------------------------------------------
cd vagrant
cd hello-spring
mvn clean install
It clean and build the project using maven. 

It will generate a target folder and our .war file inside it, 
now I copyed this .war to Tomcat 7 deployment directory after coming back to root directory, 
using command

cd /
sudo cp /vagrant/hello-spring/target/hello-spring.war /var/lib/tomcat7/webapps/

Then I search for JAVA_HOME 
vi tomcat7
uncomment it and edit
JAVA_HOME=/usr/lib/jvm/java-7-oracle
then esc then :wq for saving the file
-------------------------------------------------------------------------------------
Our application is copied to tomcat deployment directory and 
we are ready to hit the url and see our application running

Open the url : http://192.168.6.8:8080/hello-spring 
In host browser and we will see the welcome page of our Spring application.
-----------------------------------------------------------------------------------------------------------------------------------








